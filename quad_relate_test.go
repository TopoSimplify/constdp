package constdp

import (
	"testing"
	"simplex/geom"
	"github.com/franela/goblin"
)

func polyln(wkt string) *Polyline {
	ln := geom.NewLineStringFromWKT(wkt)
	coords := ln.Coordinates()
	return NewPolyline(coords)
}

func TestQuadRelate(t *testing.T) {
	g := goblin.Goblin(t)
	g.Describe("context neighbours", func() {
		g.It("should test context neighbours", func() {
			wkt := "LINESTRING ( 400 560, 520 660, 620 600, 720 640, 760 500, 680 460, 720 420, 780 400, 720 360, 580 340, 440 400, 380 440, 440 500, 400 560 )"
			ctx := geom.NewLineStringFromWKT(wkt)

			wkt_a := "LINESTRING ( 980 280, 981.3546694489717 324.82716460080917, 1006.1665140838959 336.10527579850196, 1026.4671142397428 362.0449315531954, 1017.4446252815886 410.5408097032744, 982.4824805687409 427.45797649981364, 947.5203358558933 470.31479905104624, 948.6481469756626 585.3515332675128, 921.5806801011998 611.2911890222063, 906.9191355441992 613.5468112617448, 843.7617128371196 666.5539338909009, 734.3640342194994 743.245090035212, 700 750, 650 750, 465.94498771441084 773.6959902689825, 412.93786508525466 739.8616566759041, 385.87039821079196 720.6888676398264, 361.0585535758678 717.3054342805185, 346.29722623487015 749.9852989139027, 315.5582431228852 768.0047028071353, 275.2795755968359 771.1845976118235, 246.660522354643 707.5867015180614, 265.00252427153964 657.6454550927426, 220.85197491460565 627.9662944103014, 156.8861009121442 574.9681901708519, 118.727363255887 505.01050446771376, 143.10655675849577 442.47257330884776, 122.96722299547113 361.9152382567492, 132.50690740953544 334.35614994945234, 193.01469673024513 224.45197494134325, 216.6987302454 210.9182415041119, 232.48808592216992 168.06141895287928, 300.1567531083267 120.69335192256952 )"
			wkt_b := "LINESTRING ( 310 540, 460 710, 540 950, 500 1140, 600 1080, 660 930 )"
			wkt_c := "LINESTRING ( 859.5510685138895 630.4639780582839, 850 650, 843.7617128371196 666.5539338909009, 826.8445460405803 677.8320450885938, 796.3936458068098 716.1776231607492, 791.8824013277327 726.3279232386727, 782.8599123695784 737.6060344363656, 734.3640342194994 743.245090035212, 700 750, 650 750, 618.1994888832636 772.5681791492133, 536.9970882598755 793.9965904248296, 500 800, 465.94498771441084 773.6959902689825, 412.93786508525466 739.8616566759041, 385.87039821079196 720.6888676398264, 361.0585535758678 717.3054342805185, 346.29722623487015 749.9852989139027, 315.5582431228852 768.0047028071353, 275.2795755968359 771.1845976118235, 246.660522354643 707.5867015180614, 265.00252427153964 657.6454550927426, 220.85197491460565 627.9662944103014, 156.8861009121442 574.9681901708519, 118.727363255887 505.01050446771376, 143.10655675849577 442.47257330884776, 114.31878332472097 397.14041836991646, 122.96722299547113 361.9152382567492, 132.50690740953544 334.35614994945234, 179.48096329301376 311.2934311635778, 162.56379649647457 295.5040754868079, 155.79692977785888 260.5419307739602, 193.01469673024513 224.45197494134325, 216.6987302454 210.9182415041119, 232.48808592216992 168.06141895287928, 300.1567531083267 120.69335192256952 )"
			wkt_d := "LINESTRING ( 859.5510685138895 630.4639780582839, 850 650, 843.7617128371196 666.5539338909009, 826.8445460405803 677.8320450885938, 796.3936458068098 716.1776231607492, 791.8824013277327 726.3279232386727, 782.8599123695784 737.6060344363656, 734.3640342194994 743.245090035212, 700 750, 650 750, 618.1994888832636 772.5681791492133, 536.9970882598755 793.9965904248296, 500 800, 465.94498771441084 773.6959902689825, 412.93786508525466 739.8616566759041, 385.87039821079196 720.6888676398264, 361.0585535758678 717.3054342805185, 346.29722623487015 749.9852989139027, 315.5582431228852 768.0047028071353, 275.2795755968359 771.1845976118235, 246.660522354643 707.5867015180614, 265.00252427153964 657.6454550927426, 220.85197491460565 627.9662944103014, 156.8861009121442 574.9681901708519, 118.727363255887 505.01050446771376, 190 510, 260 500, 310 440, 370 400, 450 280 )"

			pln_a := polyln(wkt_a)
			pln_b := polyln(wkt_b)
			pln_c := polyln(wkt_c)
			pln_d := polyln(wkt_d)

			g.Assert(DirectionRelate(pln_a, ctx)).Equal("TTTTFTTFT")
			g.Assert(DirectionRelate(pln_b, ctx)).Equal("FTFTTFFFF")
			g.Assert(DirectionRelate(pln_c, ctx)).Equal("TTTTFTTFF")
			g.Assert(DirectionRelate(pln_d, ctx)).Equal("TTTTTTFTF")
		})
	})
}
