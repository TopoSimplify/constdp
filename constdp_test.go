package constdp

import (
    "fmt"
    "testing"
    "simplex/dp"
    "simplex/struct/rtree"
    "simplex/struct/item"
    . "github.com/franela/goblin"
    . "simplex/geom"
    . "simplex/relations"
    "strings"
)

var consts = map[int]Geometry {
    0: ReadGeometry(`POLYGON (( 495.04969509341987 544.8522281467391, 493.88961604439055 546.4266211418503, 494.22106720125606 549.0782303967745, 495.9197543801919 550.4454664188448, 498.32277526746697 550.7769175757104, 500.1706154669922 550.2631682825692, 501.5792828836707 548.6887752874579, 501.413557305238 546.8657939246975, 501.1649689375888 544.9599497727207, 499.3419875748284 543.9655963021241, 496.6075155306878 543.2198311991767, 495.04969509341987 544.8522281467391 ))`),
    1: ReadGeometry(`POLYGON (( 515.0030547367247 578.1879282484898, 531.5820974939395 578.0164383021114, 531.4163719155068 572.3817686353974, 524.1244464644651 572.3817686353974, 523.9587208860324 566.9128245471162, 514.9201919475083 567.0014517042783, 515.0030547367247 578.1879282484898 ))`),
    2: ReadGeometry(`POINT ( 527.2732324546877 561.5267432480514 )`),
}



func TestConstDP(t *testing.T) {
    g := Goblin(t)

    g.Describe("Const DP", func() {
        g.It("should test const dp algorithm", func() {
            var ln = `LINESTRING ( 492.68319522393955 554.110909613796, 488.7802845486593 549.5575138259692, 487.6961426944148 545.0041180381422, 490.8401540717239 540.6675506211642, 493.00843778021294 538.1740243564018, 498.32073286601104 537.9571959855529, 503.849856322658 540.2338938794663, 507.7527669979383 544.5704612964444, 508.74216140966007 549.8589693908252, 508.40325211048497 556.0623649514362, 506.7770393291182 562.6756302623277, 508.2948379250605 568.746824646097, 510.571535818974 571.9992502088305, 508.07800955421163 577.0947169237797, 509.7042223355784 582.2985978241534, 506.23496840199596 584.141638976369, 500.1114422753133 581.8385101531834, 497.01976264091763 581.3228701553334, 496.8029342700687 575.9021608841108, 488.4548351020925 571.305409731824, 482.3838476086167 569.1804813877948, 478.58935111876093 563.0008728186011, 474.9032688143296 565.1691565270901, 478.2641085624876 580.3471424865132, 484.5090692175192 583.5954853260353, 486.6120008401703 588.2613780224982, 490.29808314460166 590.9717326581094, 498.7547185099482 590.8179200681622, 502.1152293558668 592.7063596249006, 511.8725060440674 591.2969752143828, 517.4016295007144 587.3940645391026, 519.8951557654768 582.2985978241534, 529.5440182682529 580.8892134136355, 531.5660533667377 577.4709379772501, 531.4389631136548 573.14986937243, 525.9663501492461 569.722552314917, 525.4242792221238 562.8924586331766, 528.6983681534931 552.9708997174125, 530.8449884933464 543.0526627005021 )`
            data := NewLineStringFromWKT(ln).Coordinates()

            var process_node = func (n item.Item){
                var  node = n.(*dp.Node)
                node.Hull = NewPolygon(
                    ConvexHull(data[node.Key[0]: node.Key[1] + 1]),
                )
            }

            var opts = &dp.Options{Polyline: data, Threshold: 0}
            opts.Relations = get_relations()
            opts.AvoidSelfIntersection = true
            opts.PreserveComplex = true
            opts.Process = process_node

            opts.Db = get_db_reader(1)

            var tree = NewConstDP(opts, true)

            var o = NewLineString(tree.Coordinates())
            fmt.Println(o.String())
            g.Assert(o.IsSimple()).IsTrue()

            opts.Threshold = 20
            o = NewLineString(tree.Simplify(opts).At())
            g.Assert(o.IsSimple()).IsTrue()

            fmt.Println(o.String())
        })
    })
}


func TestConstDPComplx(t *testing.T) {
    g := Goblin(t)

    g.Describe("Const DP", func() {
        g.It("should test const dp algorithm", func() {
            var ln = `LINESTRING ( 520.3891360357894 542.3912033070129, 506.3024618690045 551.4232473315985, 499.8456492240652 555.3948968460392, 492.961552805167 552.5004635914114, 489.3155900796462 547.0315195031302, 494.7910190818659 540.6453203655232, 503.2430235819369 542.0539877822016, 506.3024618690045 551.4232473315985, 505.72509579166825 560.3502151427206, 505.2252456091915 568.0786679640912, 509.1982380315184 573.1744625927278, 510.22036282943196 578.5066706448671, 506.9538876603224 582.6378010057998, 500.5170101211947 582.253509809434, 492.2547493993293 573.7991034893856, 486.1060902574759 569.7640459275444, 481.13065522694603 565.0658697854723, 477.55561113833613 565.056478772063, 477.07661476306924 570.8172868053748, 478.90063032561653 576.393069064855, 488.0275462393051 588.113950554013, 494.11875860924937 590.8324257774667, 503.20704849575554 590.8039889285739, 513.3907651994501 588.2100233531045, 519.7227675184544 584.0205966373184, 528.1782382221293 579.2651445083028, 528.2675859252843 570.3930616942043, 532.7013978168333 560.3489116165815, 531.7413381584337 549.6831287580544 )`
            data := NewLineStringFromWKT(ln).Coordinates()
            var opts = &dp.Options{Polyline: data, Threshold: 0}
            opts.Relations = get_relations()
            opts.AvoidSelfIntersection = true
            opts.PreserveComplex = true

            opts.Db = get_db(1)

            var tree = NewConstDP(opts, true)

            var o = NewLineString(tree.Coordinates())
            fmt.Println(o.String())
            g.Assert(o.IsSimple()).IsFalse()

            opts.Threshold = 20
            o = NewLineString(tree.Simplify(opts).At())
            g.Assert(o.IsSimple()).IsFalse()

            fmt.Println(o.String())
        })
    })
}


func get_db(state int) *rtree.RTree {
    db := NewConstDB()
    geoms := make([]Geometry, 0)
    for i:=0; i < 3; i++ {
        geoms = append(geoms, consts[i])
    }

    if state > 0 {
        LoadConstDBFromGeometries(db, geoms)
    }
    return db
}


func get_db_reader(state int) *rtree.RTree {
    db := NewConstDB()
    var _consts = `
        POLYGON (( 495.04969509341987 544.8522281467391, 493.88961604439055 546.4266211418503, 494.22106720125606 549.0782303967745, 495.9197543801919 550.4454664188448, 498.32277526746697 550.7769175757104, 500.1706154669922 550.2631682825692, 501.5792828836707 548.6887752874579, 501.413557305238 546.8657939246975, 501.1649689375888 544.9599497727207, 499.3419875748284 543.9655963021241, 496.6075155306878 543.2198311991767, 495.04969509341987 544.8522281467391 ))
        POLYGON (( 515.0030547367247 578.1879282484898, 531.5820974939395 578.0164383021114, 531.4163719155068 572.3817686353974, 524.1244464644651 572.3817686353974, 523.9587208860324 566.9128245471162, 514.9201919475083 567.0014517042783, 515.0030547367247 578.1879282484898 ))
        POINT ( 527.2732324546877 561.5267432480514 )
    `
    r := strings.NewReader(_consts)

    if state > 0 {
        LoadConstDBFromFile(db, r)
    }
    return db
}

func get_relations() []Relations {
    return []Relations{
        NewGeometryRelate(),
        NewQuadRelate(),
        NewMinDistanceRelate(0),
    }
}
